apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: obfuscator-collect-metadata-filtered-
spec:
  entrypoint: obfuscator-distributed
  parallelism: 40
  templates:
  - name: obfuscator-distributed
    steps:
    - - name: execute-analyzer
        template: analyzer-template
        arguments:
          parameters:
          - name: dbconn
            value: "{{item.dbconn}}"
          - name: features
            value: "{{item.features}}"
        withItems:
          - {   dbconn: "remove_item_function", features: "wasm-mutate/remove_item_function"  }
          - {   dbconn: "container-x-nop", features: "wasm-mutate/peep_hole,wasm-mutate/container-x-nop"  }
          - {   dbconn: "container-drop-i32.rand-x", features: "wasm-mutate/peep_hole,wasm-mutate/container-drop-i32.rand-x"  }
          - {   dbconn: "container-drop-i64.rand-x", features: "wasm-mutate/peep_hole,wasm-mutate/container-drop-i64.rand-x"  }
          - {   dbconn: "container-x-drop-i32.rand", features: "wasm-mutate/peep_hole,wasm-mutate/container-x-drop-i32.rand"  }
          - {   dbconn: "container-x-drop-i64.rand", features: "wasm-mutate/peep_hole,wasm-mutate/container-x-drop-i64.rand"  }
          - {   dbconn: "i32.use_of_global", features: "wasm-mutate/peep_hole,wasm-mutate/i32.use_of_global"  }
          - {   dbconn: "i64.use_of_global", features: "wasm-mutate/peep_hole,wasm-mutate/i64.use_of_global"  }
          - {   dbconn: "f32.use_of_global", features: "wasm-mutate/peep_hole,wasm-mutate/f32.use_of_global"  }
          - {   dbconn: "f64.use_of_global", features: "wasm-mutate/peep_hole,wasm-mutate/f64.use_of_global"  }
          - {   dbconn: "i32.unfold", features: "wasm-mutate/peep_hole,wasm-mutate/i32.unfold"  }
          - {   dbconn: "i64.unfold", features: "wasm-mutate/peep_hole,wasm-mutate/i64.unfold"  }
          - {   dbconn: "replace-with-i32-1", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-i32-1"  }
          - {   dbconn: "replace-with-i64-1", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-i64-1"  }
          - {   dbconn: "replace-with-f32-1", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-f32-1"  }
          - {   dbconn: "replace-with-f64-1", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-f64-1"  }
          - {   dbconn: "replace-with-v128-1", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-v128-1"  }
          - {   dbconn: "replace-with-i32.rand", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-i32.rand"  }
          - {   dbconn: "replace-with-i64.rand", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-i64.rand"  }
          - {   dbconn: "replace-with-f32.rand", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-f32.rand"  }
          - {   dbconn: "replace-with-f64.rand", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-f64.rand"  }
          - {   dbconn: "replace-with-ref-null-func", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-ref-null-func"  }
          - {   dbconn: "replace-with-ref-null-extern", features: "wasm-mutate/peep_hole,wasm-mutate/replace-with-ref-null-extern"  }
          - {   dbconn: "remove-drop", features: "wasm-mutate/peep_hole,wasm-mutate/remove-drop"  }
          - {   dbconn: "remove-nop", features: "wasm-mutate/peep_hole,wasm-mutate/remove-nop"  }
          - {   dbconn: "remove-global.set.0", features: "wasm-mutate/peep_hole,wasm-mutate/remove-global.set.0"  }
          - {   dbconn: "remove-global.set.1", features: "wasm-mutate/peep_hole,wasm-mutate/remove-global.set.1"  }
          - {   dbconn: "remove-elem.drop.0", features: "wasm-mutate/peep_hole,wasm-mutate/remove-elem.drop.0"  }
          - {   dbconn: "remove-elem.drop.1", features: "wasm-mutate/peep_hole,wasm-mutate/remove-elem.drop.1"  }
          - {   dbconn: "remove-data.drop.0", features: "wasm-mutate/peep_hole,wasm-mutate/remove-data.drop.0"  }
          - {   dbconn: "remove-data.drop.1", features: "wasm-mutate/peep_hole,wasm-mutate/remove-data.drop.1"  }
          - {   dbconn: "i32.add-1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.add-1"  }
          - {   dbconn: "i64.add-1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.add-1"  }
          - {   dbconn: "i32.sub-1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.sub-1"  }
          - {   dbconn: "i64.sub-1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.sub-1"  }
          - {   dbconn: "i32.and-1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.and-1"  }
          - {   dbconn: "i64.and-1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.and-1"  }
          - {   dbconn: "i32.or-1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.or-1"  }
          - {   dbconn: "i64.or-1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.or-1"  }
          - {   dbconn: "i32.xor-1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.xor-1"  }
          - {   dbconn: "i64.xor-1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.xor-1"  }
          - {   dbconn: "i32.shl-1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.shl-1"  }
          - {   dbconn: "i64.shl-1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.shl-1"  }
          - {   dbconn: "i32.shr_u-1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.shr_u-1"  }
          - {   dbconn: "i64.shr_u-1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.shr_u-1"  }
          - {   dbconn: "i32.shr_s-1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.shr_s-1"  }
          - {   dbconn: "i64.shr_s-1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.shr_s-1"  }
          - {   dbconn: "container-x-nop", features: "wasm-mutate/peep_hole,wasm-mutate/container-x-nop"  }
          - {   dbconn: "i32.operator_or_neg1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.operator_or_neg1"  }
          - {   dbconn: "", features: "wasm-mutate/peep_hole,wasm-mutate/"  }
          - {   dbconn: "i32.operator_or_neg_one1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.operator_or_neg_one1"  }
          - {   dbconn: "i32.operator_or_commutative", features: "wasm-mutate/peep_hole,wasm-mutate/i32.operator_or_commutative"  }
          - {   dbconn: "i64.operator_or_commutative", features: "wasm-mutate/peep_hole,wasm-mutate/i64.operator_or_commutative"  }
          - {   dbconn: "i32.operator_and_commutative", features: "wasm-mutate/peep_hole,wasm-mutate/i32.operator_and_commutative"  }
          - {   dbconn: "i64.operator_and_commutative", features: "wasm-mutate/peep_hole,wasm-mutate/i64.operator_and_commutative"  }
          - {   dbconn: "select_same_branches", features: "wasm-mutate/peep_hole,wasm-mutate/select_same_branches"  }
          - {   dbconn: "i32.sub_zero", features: "wasm-mutate/peep_hole,wasm-mutate/i32.sub_zero"  }
          - {   dbconn: "i32.mul_1", features: "wasm-mutate/peep_hole,wasm-mutate/i32.mul_1"  }
          - {   dbconn: "i64.mul_1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.mul_1"  }
          - {   dbconn: "f32.mul_1", features: "wasm-mutate/peep_hole,wasm-mutate/f32.mul_1"  }
          - {   dbconn: "f64.mul_1", features: "wasm-mutate/peep_hole,wasm-mutate/f64.mul_1"  }
          - {   dbconn: "i32.add_0", features: "wasm-mutate/peep_hole,wasm-mutate/i32.add_0"  }
          - {   dbconn: "i64.add_0", features: "wasm-mutate/peep_hole,wasm-mutate/i64.add_0"  }
          - {   dbconn: "f32.add_0", features: "wasm-mutate/peep_hole,wasm-mutate/f32.add_0"  }
          - {   dbconn: "f64.add_0", features: "wasm-mutate/peep_hole,wasm-mutate/f64.add_0"  }
          - {   dbconn: "i32.xor_0", features: "wasm-mutate/peep_hole,wasm-mutate/i32.xor_0"  }
          - {   dbconn: "i64.xor_0", features: "wasm-mutate/peep_hole,wasm-mutate/i64.xor_0"  }
          - {   dbconn: "i32.eq_0", features: "wasm-mutate/peep_hole,wasm-mutate/i32.eq_0"  }
          - {   dbconn: "i64.eq_0", features: "wasm-mutate/peep_hole,wasm-mutate/i64.eq_0"  }
          - {   dbconn: "i32.shl_by_0", features: "wasm-mutate/peep_hole,wasm-mutate/i32.shl_by_0"  }
          - {   dbconn: "i64.shl_by_0", features: "wasm-mutate/peep_hole,wasm-mutate/i64.shl_by_0"  }
          - {   dbconn: "i32.shr_u_by_0", features: "wasm-mutate/peep_hole,wasm-mutate/i32.shr_u_by_0"  }
          - {   dbconn: "i64.shr_u_by_0", features: "wasm-mutate/peep_hole,wasm-mutate/i64.shr_u_by_0"  }
          - {   dbconn: "i32.shr_s_by_0", features: "wasm-mutate/peep_hole,wasm-mutate/i32.shr_s_by_0"  }
          - {   dbconn: "i64.shr_s_by_0", features: "wasm-mutate/peep_hole,wasm-mutate/i64.shr_s_by_0"  }
          - {   dbconn: "i64.operator_or_neg1", features: "wasm-mutate/peep_hole,wasm-mutate/i64.operator_or_neg1"  }
          - {   dbconn: "i64.sub_zero", features: "wasm-mutate/peep_hole,wasm-mutate/i64.sub_zero"  }
          - {   dbconn: "i32.add-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i32.add-commutes"  }
          - {   dbconn: "i64.add-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i64.add-commutes"  }
          - {   dbconn: "f32.add-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/f32.add-commutes"  }
          - {   dbconn: "f64.add-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/f64.add-commutes"  }
          - {   dbconn: "i32.mul-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i32.mul-commutes"  }
          - {   dbconn: "i64.mul-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i64.mul-commutes"  }
          - {   dbconn: "f32.mul-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/f32.mul-commutes"  }
          - {   dbconn: "f64.mul-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/f64.mul-commutes"  }
          - {   dbconn: "i32.and-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i32.and-commutes"  }
          - {   dbconn: "i64.and-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i64.and-commutes"  }
          - {   dbconn: "i32.or-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i32.or-commutes"  }
          - {   dbconn: "i64.or-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i64.or-commutes"  }
          - {   dbconn: "i32.xor-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i32.xor-commutes"  }
          - {   dbconn: "i64.xor-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i64.xor-commutes"  }
          - {   dbconn: "i32.eq-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i32.eq-commutes"  }
          - {   dbconn: "i64.eq-commutes", features: "wasm-mutate/peep_hole,wasm-mutate/i64.eq-commutes"  }
          - {   dbconn: "i32.mul-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i32.mul-associates"  }
          - {   dbconn: "i64.mul-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i64.mul-associates"  }
          - {   dbconn: "i32.add-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i32.add-associates"  }
          - {   dbconn: "i32.and-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i32.and-associates"  }
          - {   dbconn: "i32.or-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i32.or-associates"  }
          - {   dbconn: "i64.or-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i64.or-associates"  }
          - {   dbconn: "i32.xor-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i32.xor-associates"  }
          - {   dbconn: "i64.xor-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i64.xor-associates"  }
          - {   dbconn: "i32.eq-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i32.eq-associates"  }
          - {   dbconn: "i64.eq-associates", features: "wasm-mutate/peep_hole,wasm-mutate/i64.eq-associates"  }
          - {   dbconn: "i32.mul-by-2", features: "wasm-mutate/peep_hole,wasm-mutate/i32.mul-by-2"  }
          - {   dbconn: "i64.mul-by-2", features: "wasm-mutate/peep_hole,wasm-mutate/i64.mul-by-2"  }
          - {   dbconn: "i32.mul-by-4", features: "wasm-mutate/peep_hole,wasm-mutate/i32.mul-by-4"  }
          - {   dbconn: "i64.mul-by-4", features: "wasm-mutate/peep_hole,wasm-mutate/i64.mul-by-4"  }

          
        continueOn:
          failed: true
   
  - name: analyzer-template

    inputs:
      parameters:
      - name: dbconn
      - name: features
    
      artifacts:
      - name: wasms
        path: /wasms
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          key: "my-artifacts/filtered"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
    outputs:
      artifacts:
      - name: data
        path: /{{inputs.parameters.dbconn}}_t5.zip
        archive:
          none: {}
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "my-artifacts/datas"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
      - name: csv
        path: /{{inputs.parameters.dbconn}}_t5.csv
        archive:
          none: {}
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "my-artifacts/csvs"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
    script:
    
      image: jacarte/obf-image:code
      command: [bash]
      source: |
         # Update with latest version
         git pull
         git submodule update --recursive

         # Ok compile the right version
         $HOME/.cargo/bin/cargo build --release --features "{{inputs.parameters.features}}" 

         # Now run the analysis 
         RUST_LOG=analyzer=debug ./target/release/analyzer --dbconn "datas/{{inputs.parameters.dbconn}}_t5" extract -t 5 -s 1 -d 2 --input "/wasms" 
        
         # Get some data
          RUST_LOG=analyzer=debug ./target/release/analyzer --dbconn  "datas/{{inputs.parameters.dbconn}}_t5" export --level 2 -c "/{{inputs.parameters.dbconn}}_t1.csv"

         # Now save the datas folder
         7z a  -tzip /{{inputs.parameters.dbconn}}_t5.zip "datas/{{inputs.parameters.dbconn}}_t5"