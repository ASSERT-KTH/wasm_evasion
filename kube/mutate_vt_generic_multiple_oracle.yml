apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: obfuscator-mutate-
spec:
  entrypoint: obfuscator-mutate
  parallelism: 10
  arguments:
    parameters:
    - name: attempts
    - name: treesize
    - name: peek
    - name: file
  templates:
  - name: obfuscator-mutate
    steps:
    - - name: select-oracle
        template: select-oracle-template
        arguments:
          parameters:
          - name: oracle
            value: "{{ item.oracle }}"
        withItems:
          - { oracle: 'all' }
          # Add the others here

  - name: select-oracle-template
    inputs:
      parameters:
      - name: oracle
    steps:
    - - name: execute-analyzer
        template: analyzer-template
        arguments:
          parameters:
          - name: oracle
            value: "{{ inputs.parameters.oracle }}"
          - name: features
            value: "{{item.features}}"
          - name: dbconn
            value: "{{item.dbconn}}"
        withItems:
          - { dbconn: "all", features: "wasm-mutate/all" }
        continueOn:
          failed: true
  - name: analyzer-template
    retryStrategy:
      limit: 3
    inputs:
      parameters:
      - name: oracle
      - name: dbconn
      - name: features
      artifacts:
      - name: data
        path: /input.wasm
        archive:
          none: {}
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "filtered/{{workflow.parameters.file}}"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
    outputs:
      artifacts:
      - name: data
        path: /{{inputs.parameters.dbconn}}.zip
        optional: true
        archive:
          none: {}
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "data/vt/{{inputs.parameters.oracle}}/mutate_datas/{{workflow.parameters.file}}/{{inputs.parameters.dbconn}}.zip"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
      - name: logs
        path: /{{inputs.parameters.dbconn}}.logs.txt
        optional: true
        archive:
          none: {}
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "data/vt/{{inputs.parameters.oracle}}/logs_mutate/{{workflow.parameters.file}}/{{inputs.parameters.dbconn}}.logs.txt"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
      - name: stats
        path: /{{inputs.parameters.dbconn}}.stats.txt
        optional: true
        archive:
          none: {}
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "data/vt/{{inputs.parameters.oracle}}/logs_mutate/{{workflow.parameters.file}}/{{inputs.parameters.dbconn}}.stats.txt"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
    script:
    
      image: jacarte/obf-image:687cfe1
      command: [bash]
      resources:
        requests:
          memory: "0"
          cpu: 2
      source: |
         # Install mc client to save snapshot
          mkdir -p $HOME/minio-binaries
          wget -O $HOME/minio-binaries/mc https://dl.min.io/client/mc/release/linux-amd64/mc
          ls
          echo "======"
          chmod +x $HOME/minio-binaries/mc
          export PATH=$PATH:$HOME/minio-binaries/
         
          mc config host add exp http://minio-service.minio:3434 minio minio123

          
          if [[  $(mc ls exp/my-bucket/data/vt/{{ inputs.parameters.oracle }}/mutate_datas/{{workflow.parameters.file}}/{{inputs.parameters.dbconn}}.zip | wc -l) -gt 0 ]]
          then
            echo "Already exist. Skip"
            exit 0
          fi

          # Now copy this into /wasms

         # Update with latest version
         git pull
         git submodule update --recursive

         ls -R ../oracles
         pip3 install -r ../oracles/requirements.txt

         # Ok compile the right version
         $HOME/.cargo/bin/cargo build --release --features "{{inputs.parameters.features}}" 

          # launch watchdog
          touch "{{inputs.parameters.dbconn}}.stats.txt"
          #bash watchdog_interval.sh "{{inputs.parameters.dbconn}}.stats.txt" 60 {{workflow.parameters.file}} &
          #watchID=$!

          touch "{{inputs.parameters.dbconn}}.logs.txt"
          #bash watchdog_interval.sh "{{inputs.parameters.dbconn}}.logs.txt" 60 {{workflow.parameters.file}} &
          #watchID2=$!

         echo "Oracle {{inputs.parameters.oracle}}"
         RUST_LOG=analyzer=debug ./target/release/analyzer --dbconn "datas/{{inputs.parameters.dbconn}}" mutate --bulk-size 10 -s {{workflow.parameters.treesize}} -e --attempts {{workflow.parameters.attempts}} -p {{workflow.parameters.peek}}  --input /input.wasm --oracle python3 ../oracles/vt_custom_chrome/vt_oracle_count.py http://vt-service.vt:4000 {{ inputs.parameters.oracle }} vt vt123 {{ inputs.parameters.oracle }} 1> {{inputs.parameters.dbconn}}.stats.txt
         
         #kill -9 $watchID
         #kill -9 $watchID2

         ls .
         #touch /{{inputs.parameters.dbconn}}.logs.txt 
         cp probes.logs.txt /{{inputs.parameters.dbconn}}.logs.txt 
         cp {{inputs.parameters.dbconn}}.stats.txt  /{{inputs.parameters.dbconn}}.stats.txt 
         cp probes.logs.txt datas/{{inputs.parameters.dbconn}}
         cat /{{inputs.parameters.dbconn}}.stats.txt 
         # Now save the datas folder
         7z a  -tzip /{{inputs.parameters.dbconn}}.zip "datas/"