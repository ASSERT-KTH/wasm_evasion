apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: obfuscator-collect-metadata-filtered-1by1-
spec:
  entrypoint: obfuscator-distributed
  parallelism: 100
  arguments:
    parameters:
    - name: dbconn
    - name: dbpass
    - name: dbuser
    - name: collection
    - name: worklist1
    - name: count
    - name: depth
  templates:
  - name: obfuscator-distributed
    steps:
    - - name: download-worklist
        template: download-worklist-template


    - - name: execute-analyzer
        template: execute-analyzer-template
        arguments:
          parameters:
          - name: item
            value: "{{item}}"
          artifacts:
          - name: list
            from: "{{steps.download-worklist.outputs.artifacts.binaries1}}"  
        withSequence: 
          count: "{{workflow.parameters.count}}"
        continueOn:
          failed: true
  - name: execute-analyzer-template
    inputs:
      parameters:
        - name: item
      artifacts:
        - name: list
    steps:
    - - name: get-file-name
        template: get-file-name-template
        arguments:
          parameters:
          - name: item
            value: "{{inputs.parameters.item}}"
          artifacts:
          - name: list
            from: "{{inputs.artifacts.list}}"  
    - - name: analyze-file
        template: analyze-file-template
        arguments:
          parameters:
          - name: item
            value: "{{steps.get-file-name.outputs.parameters.program}}"

  - name: download-worklist-template
    script:
      image: cirrusci/wget
      command: [sh]
      source: |
         wget -O /worklist1.json {{workflow.parameters.worklist1}}

    outputs:
      artifacts:
        - name: binaries1
          path: "/worklist1.json"

  - name: get-file-name-template
    script:
      image: jacarte/obf-image:latest4
      command: [sh]
      source: |
         jq -r '.[{{inputs.parameters.item}}].address' /tmp/list > name.txt
         cat name.txt

    inputs:
      parameters:
      - name: item
      artifacts:
      - name: list
        path: /tmp/list
    outputs:
      parameters:
        - name: program
          valueFrom: 
            path: "/name.txt"
          

  - name: analyze-file-template
    outputs:
      artifacts:
      - name: metas
        path: /metas_{{workflow.parameters.depth}}
        archive:
          none: {}
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "my-artifacts/metas_filtered_{{workflow.parameters.depth}}"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
    inputs:
      parameters:
      - name: item
      artifacts:
      - name: target
        path: /target/{{inputs.parameters.item}}
        s3:
          bucket: my-bucket
          endpoint: minio-service.minio:3434
          insecure: true
          key: "my-artifacts/filtered/{{inputs.parameters.item}}"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
    
    retryStrategy:
      limit: "10"
      backoff:
        duration: "1s"       # Must be a string. Default unit is seconds. Could also be a Duration, e.g.: "2m", "6h", "1d"
        factor: "10"
        maxDuration: "60m" # Must be a string. Default unit is seconds. Could also be a Duration, e.g.: "2m", "6h", "1d"

    script:
      image: jacarte/obf-image:latest4
      command: [bash]
      resources:
        requests:
          memory: 2G
          cpu: 2
      source: |

         mkdir -p process
         mkdir -p metas

         cp /target/{{inputs.parameters.item}} process/

         echo "======="
         echo "======="
         ls .

         
         ./analyzer  "{{workflow.parameters.dbpass}}" "{{workflow.parameters.dbuser}}" --collection_name filtered_{{workflow.parameters.collection}}{{workflow.parameters.depth}} --dbconn "{{workflow.parameters.dbconn}}" extract -d {{workflow.parameters.depth}} -m muts_{{workflow.parameters.depth}} process || true

         mv metas metas_{{workflow.parameters.depth}}
         echo "nothing" > metas_{{workflow.parameters.depth}}/nothing.txt

         ls metas_{{workflow.parameters.depth}}

