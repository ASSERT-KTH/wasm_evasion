import matplotlib.pyplot as plt
import sys
import os
import re
import json

DEEP_FILTERING = True

if __name__ == "__main__":
    # load all files that ends in mutation_info.txt recursively
    mutations = []
    to_remove = []
    for parent, _, files in os.walk("."):
        for f in files:
            print(f)
            file_muts = []
            if f.endswith("mutation_info.txt"):
                content = open(f"{parent}/{f}", 'r').read()
                # Check if it is a successful one, otherwise continue
                maxreward = 0
                lines = content.split("\n")
                for l in lines:
                    if l and "not moved" not in l:
                        print(l)
                        cells = l.split("|")
                        mut = cells[4]
                        reward = int(cells[2])
                        maxreward = max(reward, maxreward)
                        # remove the seed
                        mut = re.sub(r", \d+\)\]", "", mut)
                        mut = mut.replace("reduction", "")
                        #print(mut)
                        beta = parent.split("/")[-1]
                        file = parent.split("/")[1]

                        if DEEP_FILTERING:
                            mut = re.sub("\"large\", \"\d+\"", "", mut)
                            mut = re.sub("\"med\", \"\d+\"", "", mut)
                            mut = re.sub("\"simple\", \"\d+\"", "", mut)

                            # Remove one add per inclusion
                            if '"remove", "function"' in mut:
                                to_remove.append([ mut, file, beta ])
                                print(mut, "added to remove")
                            if '"remove", "type"' in mut:
                                to_remove.append([ mut, file, beta ])
                                print(mut, "added to remove")

                        #print(beta, file)
                        file_muts.append(
                            [mut, file, beta]
                        )
                if maxreward == 60:
                    mutations += file_muts

    print(len(mutations), len(to_remove))
    delete_mark = [1]*len(mutations)
    for mut, parent, beta in to_remove:
        found = False
        delete_mark.append(1)

        if '"remove", "function"' in mut:
            # look for an add type
            for i, (mut1, parent1, beta1) in enumerate(mutations):
                if '"add", "function"' in mut1 and parent1 == parent and beta == beta1  and delete_mark[i]:
                    delete_mark[i] = 0
                    found = True
                    break

        if '"remove", "type"' in mut:
            # look for an add type
            for i, (mut1, parent1, beta1) in enumerate(mutations):
                if '"add", "type"' in mut1 and parent1 == parent and beta == beta1 and delete_mark[i]:
                    
                    delete_mark[i] = 0
                    found = True
                    break 
    

    mutations = [ mutations[i] for i, m in enumerate(mutations) if delete_mark[i] ]
    
    open("t.json", 'w').write(json.dumps(mutations, indent=4))
    # get the stats
    count1 = {}
    countalpha1 = {}
    countalpha2 = {}
    countalpha3 = {}
    by_file = {}

    for mut, parent, beta in mutations:
        # beautify mut
        if "peephole" in mut:
            mut = 'peephole mutation'
        if '"add", "function"' in mut:
            mut = "add function"
        if '"remove", "function"' in mut:
            mut = "remove function"

        if '"add", "type"' in mut:
            mut = "add type"
        if '"remove", "type"' in mut:
            mut = "remove type"
        if '"remove", "global"' in mut:
            mut = "remove global"

        if 'codemotion' in mut:
            mut = "codemotion"

        if 'modify' in mut and "custom_section" in mut:
            mut = "modify custom section"


        if mut not in count1:
            count1[mut] = 0
        count1[mut] += 1

        if beta == "1.1":
            if mut not in countalpha1:
                countalpha1[mut] = 0
            countalpha1[mut] += 1
        
        if beta == "0.01":
            if mut not in countalpha2:
                countalpha2[mut] = 0
            countalpha2[mut] += 1

        if beta == "0.3":
            if mut not in countalpha3:
                countalpha3[mut] = 0
            countalpha3[mut] += 1

        if parent not in by_file:
            by_file[parent] = {
                'all': {},
                '0.01': {},
                '0.3': {},
                '1.1': {}
            }

        if mut not in by_file[parent]['all']:
            by_file[parent]['all'][mut] = 0
        by_file[parent]['all'][mut] += 1


        if beta == "1.1":
            if mut not in by_file[parent]['1.1']:
                by_file[parent]['1.1'][mut] = 0
            by_file[parent]['1.1'][mut] += 1
        
        if beta == "0.01":
            if mut not in by_file[parent]['0.01']:
                by_file[parent]['0.01'][mut] = 0
            by_file[parent]['0.01'][mut] += 1

        if beta == "0.3":
            if mut not in by_file[parent]['0.3']:
                by_file[parent]['0.3'][mut] = 0
            by_file[parent]['0.3'][mut] += 1


    plt.clf()
    items = [
        (x, y) for x, y in count1.items()
    ]
    items = sorted(items, key = lambda x: x[1], reverse=True)
    plt.bar(
        x = range(len(items)),
        height=[x[1] for x in items],
        color = ['C0', 'C1', 'C0', 'C1', 'C1', 'C1', 'C1', 'C1']
    )
    plt.xticks(
        range(len(items)),
        labels = [ x[0] for x in items ],
        rotation=45,
        ha='right'
    )
    plt.tight_layout()
    plt.savefig("all.png", dpi=300)


    plt.clf()
    
    items = [
        (x, y) for x, y in countalpha2.items()
    ]
    items = sorted(items, key = lambda x: x[1], reverse=True)
    plt.bar(
        x = range(len(items)),
        height=[x[1] for x in items],
        color = ['C0', 'C1', 'C0', 'C1', 'C1', 'C1', 'C1', 'C1']
    )
    plt.xticks(
        range(len(items)),
        labels = [ x[0] for x in items ],
        rotation=45,
        ha='right'
    )
    plt.tight_layout()
    plt.savefig("0.01.png")


    plt.clf()
    
    
    items = [
        (x, y) for x, y in countalpha3.items()
    ]
    items = sorted(items, key = lambda x: x[1], reverse=True)
    plt.bar(
        x = range(len(items)),
        height=[x[1] for x in items],
        color = ['C0', 'C1', 'C0', 'C1', 'C1', 'C1', 'C1', 'C1']
    )
    plt.xticks(
        range(len(items)),
        labels = [ x[0] for x in items ],
        rotation=45,
        ha='right'
    )
    plt.tight_layout()
    plt.savefig("0.3.png")


    plt.clf()
   
    
    items = [
        (x, y) for x, y in countalpha1.items()
    ]
    items = sorted(items, key = lambda x: x[1], reverse=True)
    plots = plt.bar(
        x = range(len(items)),
        height=[x[1] for x in items],
        color = ['C0', 'C1', 'C0', 'C1', 'C1', 'C1', 'C1', 'C1']
    )
    for bar in plots.patches:
        plt.annotate(format(bar.get_height(), '.2f'),
         (bar.get_x() + bar.get_width() / 2,
            bar.get_height()), ha='center', va='center',
            size=8, xytext=(0, 8),
            textcoords='offset points')
    plt.xticks(
        range(len(items)),
        labels = [ x[0] for x in items ],
        rotation=45,
        ha='right'
    )
    plt.ylim(0, 420)
    plt.tight_layout()
    plt.savefig("1.1.png", dpi=300)

    # per file

    for f in by_file.keys():
        count = by_file[f]['all']

        plt.clf()
    
        
        items = [
            (x, y) for x, y in count.items()
        ]
        items = sorted(items, key = lambda x: x[1], reverse=True)
        plt.bar(
            x = range(len(items)),
            height=[x[1] for x in items],
        color = ['C0', 'C1', 'C0', 'C1', 'C1', 'C1', 'C1', 'C1']
        )
        plt.xticks(
            range(len(count)),
            labels = [ x[0] for x in items ],
            rotation=45,
            ha='right'
        )
        plt.tight_layout()
        plt.savefig(f"{f}.all.png")

        count = by_file[f]['0.3']

        plt.clf()
    
        
        items = [
            (x, y) for x, y in count.items()
        ]
        items = sorted(items, key = lambda x: x[1], reverse=True)
        plt.bar(
            x = range(len(items)),
            height=[x[1] for x in items],
        color = ['C0', 'C1', 'C0', 'C1', 'C1', 'C1', 'C1', 'C1']
        )
        plt.xticks(
            range(len(count)),
            labels = [ x[0] for x in items ],
            rotation=45,
            ha='right'
        )
        plt.tight_layout()
        plt.savefig(f"0.3.{f}.png")


        count = by_file[f]['1.1']

        plt.clf()
    
        
        items = [
            (x, y) for x, y in count.items()
        ]
        items = sorted(items, key = lambda x: x[1], reverse=True)
        plt.bar(
            x = range(len(items)),
            height=[x[1] for x in items],
        color = ['C0', 'C1', 'C0', 'C1', 'C1', 'C1', 'C1', 'C1']
        )
        plt.xticks(
            range(len(count)),
            labels = [ x[0] for x in items ],
            rotation=45,
            ha='right'
        )
        plt.tight_layout()
        plt.savefig(f"1.1.{f}.png")



        count = by_file[f]['0.01']

        plt.clf()
    
        
        items = [
            (x, y) for x, y in count.items()
        ]
        items = sorted(items, key = lambda x: x[1], reverse=True)
        plt.bar(
            x = range(len(items)),
            height=[x[1] for x in items],
        color = ['C0', 'C1', 'C0', 'C1', 'C1', 'C1', 'C1', 'C1']
        )
        plt.xticks(
            range(len(count)),
            labels = [ x[0] for x in items ],
            rotation=45,
            ha='right'
        )
        plt.tight_layout()
        plt.savefig(f"0.01.{f}.png")