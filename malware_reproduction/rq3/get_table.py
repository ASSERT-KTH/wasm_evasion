import matplotlib.pyplot as plt
import sys
import os
import numpy as np
from itertools import zip_longest


def reject_outliers(data):
    m = 2
    u = np.mean(data)
    s = np.std(data)
    filtered = [e for e in data if (u - m * s < e < u + m * s)]
    return filtered

def get_samples(f, remove_outliers=True):
    content = open(f, 'r').read()
    r =  []
    for l in content.split(","):
        if l : 
            r.append(float(l))

    deltas = []

    for i, l in list(enumerate(r))[1:]:
        delta = l - r[i - 1]
        deltas.append(delta)
    
    if remove_outliers:
        deltas = reject_outliers(deltas)

    # print(f, deltas)

    return deltas

def samples(original, betas, baselines):
    original_samples = get_samples(original)
    beta_samples = []
    baseline_names = baselines
    labels = []

    for i, b in enumerate(betas):
        if b:
            beta_samples.append(get_samples(b))
        else:
            beta_samples.append(None)

    baselines = [ get_samples(b) for  b in baselines if b]

    baselines = [ b for b in baselines if np.median(b) > 0 ]

    r = {
        'original': original_samples,
        'baselines': baselines,
        'baselines_names': baseline_names,
        'mcmc': beta_samples
    }

    return r

def get_row(subject):

    args = subject.split(" ")
    title = args[0]
    original = args[1]
    beta1 = args[2]
    beta2 = args[3]
    beta3 = args[4]

    print(beta1, beta2, beta3)

    baselines = args[5:]

    betas = []

    if beta1 != "/dev/null":
        betas.append(beta1)
    else:
        betas.append(None)

    if beta2 != "/dev/null":
        betas.append(beta2)
    else:
        betas.append(None)

    if beta3 != "/dev/null":
        betas.append(beta3)
    else:
        betas.append(None)

    row = samples(original, betas, baselines)
    

    return title, row
if __name__ == "__main__":
    subjects = sys.argv[1:]


    rows = [get_row(s) for s in subjects]
    # get max of baselines
    l = max(len(r['baselines']) for _, r in rows)
    l = min(10, l)
    # print(l)
    print_ratio = True
    print_extrema = False
    for title, row in rows:

        if print_extrema:
            # print max
            rowstr = " & "
            mx_orig = max(row['original'])

            rowstr += f"{mx_orig:.1f} & "


            for i in range(l):
                if i < len(row["baselines"]):
                    bs = row['baselines'][i]
                    bmean = np.max(bs)


                    ratio = bmean/mx_orig
                    if ratio > 1.0:
                        decor =  f"\\textbf{{{ratio:.2f}}}"
                    else:
                        decor = f"{ratio:.2f}"

                    ratio = "(%s)"%(decor, ) if print_ratio else ""
                                    
                    rowstr += f" {bmean:.1f}{ratio} &"
                else:
                    rowstr += " &"
            
            for i in range(len(row['mcmc'])):
                sigma = row['mcmc'][i]

                if sigma:
                    mean = np.max(sigma)
                    ratio = mean/mx_orig
                    if ratio > 1.0:
                        decor =  f"\\textbf{{{ratio:.2}}}"
                    else:
                        decor = f"{ratio:.2}"

                    ratio = "(%s)"%(decor, ) if print_ratio else ""

                    rowstr += " %.1f%s &"%(mean , ratio)
                else:
                    rowstr += "&"


            rowstr += "\b \\\\"
            print(rowstr)
        # print row
        rowstr = ""
        rowstr = f"{title} & "
        # Add the original data


        mean_orig = np.median(row['original'])
        rowstr += f"{mean_orig:.1f} & "
        



        for i in range(l):
            if i < len(row["baselines"]):
                bs = row['baselines'][i]
                bmean = np.median(bs)


                ratio = mean_orig/bmean
                if ratio <= 1.0:
                    decor =  f"\\textbf{{{ratio:.2f}}}"
                else:
                    decor = f"{ratio:.2f}"

                ratio = "(%s)"%(decor, ) if print_ratio else ""
                                
                rowstr += f" {bmean:.1f}{ratio} &"

                print(row['baselines_names'][i], ratio)
            else:
                rowstr += " &"

        for i in range(len(row['mcmc'])):
            sigma = row['mcmc'][i]

            if sigma:
                mean = np.median(sigma)
                ratio = mean_orig/mean
                if ratio <= 1.0:
                    decor =  f"\\textbf{{{ratio:.2}}}"
                else:
                    decor = f"{ratio:.2}"

                ratio = "(%s)"%(decor, ) if print_ratio else ""
                rowstr += " %.1f%s &"%(mean , ratio)
            else:
                rowstr += "&"


        rowstr += "\b \\\\\n"
        print(rowstr)

        if print_extrema:
            # print max
            rowstr = " & "
            mx_orig = min(row['original'])

            rowstr += f"{mx_orig:.1f} & "


            for i in range(l):
                if i < len(row["baselines"]):
                    bs = row['baselines'][i]
                    bmean = np.min(bs)

                    if bmean > 0 and mx_orig > 0:
                        ratio = bmean/mx_orig
                        if ratio > 1.0:
                            decor =  f"\\textbf{{{ratio:.2f}}}"
                        else:
                            decor = f"{ratio:.2f}"

                        ratio = "(%s)"%(decor, ) if print_ratio else ""
                    else:
                        ratio = ""

                    rowstr += f" {bmean:.1f}{ratio} &"
                else:
                    rowstr += " &"
            
            for i in range(len(row['mcmc'])):
                sigma = row['mcmc'][i]

                if sigma:
                    mean = np.min(sigma)
                    
                    if mean > 0 and mx_orig > 0:
                        ratio = mean/mx_orig
                        
                        if ratio > 1.0:
                            decor =  f"\\textbf{{{ratio:.2}}}"
                        else:
                            decor = f"{ratio:.2}"

                        ratio = "(%s)"%(decor, ) if print_ratio else ""
                        rowstr += " %.1f%s &"%(mean , ratio)
                    else:
                        rowstr += "&"

                else:
                    rowstr += "&"


            rowstr += "\b \\\\"
            print(rowstr)
