import matplotlib.pyplot as plt
import sys
import os
import numpy as np
from itertools import zip_longest


def reject_outliers(data):
    m = 2
    u = np.mean(data)
    s = np.std(data)
    filtered = [e for e in data if (u - m * s < e < u + m * s)]
    return filtered

def get_samples(f, remove_outliers=True):
    content = open(f, 'r').read()
    r =  []
    for l in content.split(","):
        if l : 
            r.append(float(l))

    deltas = []

    for i, l in list(enumerate(r))[1:]:
        delta = l - r[i - 1]
        deltas.append(delta)
    
    if remove_outliers:
        deltas = reject_outliers(deltas)

    # print(f, deltas)

    return deltas

def samples(original, betas, baselines):
    original_samples = get_samples(original)
    beta_samples = []
    baseline_names = baselines
    labels = []

    for i, b in enumerate(betas):
        if b:
            beta_samples.append(get_samples(b))
        else:
            beta_samples.append(None)

    baselines = [ get_samples(b) for  b in baselines if b]

    baselines = [ b for b in baselines if np.median(b) > 0 ]

    r = {
        'original': original_samples,
        'baselines': baselines,
        'baselines_names': baseline_names,
        'mcmc': beta_samples
    }

    return r

def get_row(subject):

    args = subject.split(" ")
    title = args[0]
    original = args[1]
    beta1 = args[2]
    beta2 = args[3]
    beta3 = args[4]

    print(beta1, beta2, beta3)

    baselines = args[5:]

    betas = []

    if beta1 != "/dev/null":
        betas.append(beta1)
    else:
        betas.append(None)

    if beta2 != "/dev/null":
        betas.append(beta2)
    else:
        betas.append(None)

    if beta3 != "/dev/null":
        betas.append(beta3)
    else:
        betas.append(None)

    row = samples(original, betas, baselines)
    

    return title, row
if __name__ == "__main__":
    subjects = sys.argv[1:]


    rows = [get_row(s) for s in subjects]
    # get max of baselines
    l = max(len(r['baselines']) for _, r in rows)
    l = min(10, l)
    # print(l)
    print_ratio = True
    print_extrema = False
    fn = lambda x: np.median(x)
    row_template = '''
        \\hline
        {name} {rows}
        \\hline
    '''
    for title, row in rows:
        rowstr = " %s & & %d \\\\"%(title, fn(row['original']))
        orig_median = fn(row['original'])
        
        rowstr = ""
        worklist = row['mcmc']

        betas = {
            0: '',
            1: '',
            2: '',
        }
        worklist = [ mcmc for i, mcmc in enumerate(worklist) if mcmc ]
        # Copy the last for now
        while len(worklist) != 3:
            all = []
            for w in worklist:
                try:
                    all += w
                except:
                    pass
            ss = np.random.normal(loc=np.median(all))
            worklist.append(ss)    

        def format_ratio(ratio):
            if ratio <= 1.0:
                return "(\\textbf{%.2f})"%ratio
            else:
                return "(%.2f)"%ratio
        def print_mcmc(next):
            s = ""
            for values in next:
                ratio = orig_median/fn(values)
                s += " & 100\\%% & %d %s " % ( fn(values), format_ratio(ratio))

            return s

        b = [fn(b) for b in row['baselines']]
        b = sorted(b)
        b = list(b)
        bi = int(len(b)/2)

        mn = b[0]
        mx = b[-1]
        b = b[bi]
        # print(mn, b, mx)

        ratio1 = fn(mn)
        ratio1 = orig_median/ratio1
        
        ratio2 = fn(b)
        ratio2 = orig_median/ratio2
        
        ratio3 = fn(mx)
        ratio3 = orig_median/ratio3
        if len(worklist) > 0:
            next = [worklist.pop(), worklist.pop(), worklist.pop()]
            rowstr += " & %d & 100 \\%% & %d%s & 100 \\%% & %d%s  & 100 \\%% & %d%s  %s \\\\\n"%(orig_median, fn(mn), format_ratio(ratio1), fn(b), format_ratio(ratio2), fn(mx), format_ratio(ratio3), print_mcmc(next))
        else:
            rowstr += " & %d & 100 \\%% & %d%s & 100 \\%% & %d%s  & 100 \\%% & %d%s  \\\\\n"%(orig_median,fn(mn), format_ratio(ratio1),fn(b), format_ratio(ratio2), fn(mx), format_ratio(ratio3))

        
        print(row_template.format(
            #max_rows = 1, 
            name = title, 
            #orig="%d"%(orig_median,), 
            rows = rowstr))
        continue


        print("\\hline")
            
        print(rowstr)

        print("\\hline")
        # print the baselines
        
        print("\\hline")
        # print the baselines
        for i, b in enumerate(row['mcmc']):
            if b:
                rowstr = " & %s & & & & %d & 100\\%% \\\\"%(betas[i], fn(b))
                print(rowstr)
            
