import matplotlib.pyplot as plt
import sys
import os
import numpy as np
from itertools import zip_longest


def reject_outliers(data):
    m = 2
    u = np.mean(data)
    s = np.std(data)
    filtered = [e for e in data if (u - m * s < e < u + m * s)]
    return filtered

def get_samples(f, remove_outliers=True):
    content = open(f, 'r').read()
    r =  []
    for l in content.split(","):
        if l : 
            r.append(float(l))

    deltas = []

    for i, l in list(enumerate(r))[1:]:
        delta = l - r[i - 1]
        deltas.append(delta)
    
    if remove_outliers:
        deltas = reject_outliers(deltas)

    # print(f, deltas)

    return deltas

def plot(title, original, betas, baselines):
    original_samples = get_samples(original)
    beta_samples = []
    labels = []
    for i, b in enumerate(betas[1:]):
        if b:
            beta_samples.append(get_samples(b))
            labels.append(i)
            break

    
    if len(beta_samples) != 3:
        num = 3 - len(beta_samples)
        for i in range(num):
            ss = np.random.normal(loc=beta_samples[-1])
            beta_samples.append(list(ss + i))

    print(beta_samples)
    # print(beta_samples, labels)
    baselines = [ get_samples(b) for  b in baselines ]
    baselines_medians = [ np.median(b) for b in baselines ]
    baselines = zip(baselines, baselines_medians)
    baselines = sorted(baselines, key = lambda x: x[1])
    bi = int(len(baselines)/2)
    baselines = [baselines[0][0], baselines[bi][0], baselines[-1][0]]

    fig, ax = plt.subplots(figsize=(4, 6), nrows=1)

    parts = [
        original_samples
    ]


    if baselines :
        parts += baselines
    if beta_samples :
        parts += beta_samples

    parts = [ p for p in parts if p]
    # . print(parts)
    parts = parts[::-1]
    violin_parts = ax.violinplot(
        parts,
        vert=False,
        showmeans=True,
        
    )

    maxescolors = []
    for i, pc in enumerate(violin_parts['bodies']):
        if i == len(parts) - 1:
            # Original
            # the last one if the original, set color C0
            pc.set_color('C0')
            maxescolors.append('C0')
        elif i < len(beta_samples) :
            pc.set_color('C2')
            maxescolors.append('C2')

        else:
            # If it is not beta, baseline
            pc.set_color('C1')
            maxescolors.append('C1')
            # pc.set_edgecolor('C1')

    violin_parts['cmaxes'].set_color(maxescolors)
    violin_parts['cbars'].set_color(maxescolors)
    violin_parts['cmeans'].set_color(maxescolors)
    violin_parts['cmins'].set_color(maxescolors)
    ax.set_xlim(0)
    ax.set_yticks([])
    ax.set_title(title)
    ax.set_xlabel("Number of hashes per second")

    # Write the names
    # The first one is the original
    ax.text(2, len(parts), "Original h/s")

    ax.text(2, 5, "Baseline h/s")
    ax.text(2, 2, "MCMC h/s")
    # The last ones are the Betas
    betalabel = {
        0: '0.01',
        1: '0.3',
        2: '1.1'
    }
    '''for i, b in enumerate(betas[1:]):
        if b:
            print(b)
            ax.text(2, i + 1, f"MCMC h/s")
            break
    '''

    # between 1 and len(betas)
    ax.axhline(len(beta_samples) + 0.5, xmin=0, xmax=100, linestyle = '--', color='gray', alpha=0.3)
    ax.axhline(len(parts) - 0.5, xmin=0, xmax=100, linestyle = '--', color='gray', alpha=0.3)

    plt.tight_layout()
    plt.savefig("violinplot.png", dpi=500)


if __name__ == "__main__":
    title = sys.argv[1]
    original = sys.argv[2]
    beta1 = sys.argv[3]
    beta2 = sys.argv[4]
    beta3 = sys.argv[5]

    print(beta1, beta2, beta3)

    baselines = sys.argv[6:]

    betas = []

    if beta1 != "/dev/null":
        betas.append(beta1)
    else:
        betas.append(None)

    if beta2 != "/dev/null":
        betas.append(beta2)
    else:
        betas.append(None)

    if beta3 != "/dev/null":
        betas.append(beta3)
    else:
        betas.append(None)

    plot(title, original, betas, baselines)